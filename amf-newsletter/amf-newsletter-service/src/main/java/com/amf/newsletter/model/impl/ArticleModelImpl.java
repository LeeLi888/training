/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.amf.newsletter.model.impl;

import com.amf.newsletter.model.Article;
import com.amf.newsletter.model.ArticleModel;
import com.amf.newsletter.model.ArticleSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Article service. Represents a row in the &quot;AmfNewsletter_Article&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ArticleModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ArticleImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ArticleImpl
 * @generated
 */
@JSON(strict = true)
public class ArticleModelImpl
	extends BaseModelImpl<Article> implements ArticleModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a article model instance should use the <code>Article</code> interface instead.
	 */
	public static final String TABLE_NAME = "AmfNewsletter_Article";

	public static final Object[][] TABLE_COLUMNS = {
		{"articleId", Types.BIGINT}, {"issueNumber", Types.BIGINT},
		{"order_", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"title", Types.VARCHAR}, {"author", Types.VARCHAR},
		{"content", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"journalArticleId", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("articleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("issueNumber", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("order_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("author", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("journalArticleId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AmfNewsletter_Article (articleId LONG not null primary key,issueNumber LONG,order_ LONG,companyId LONG,title TEXT null,author VARCHAR(75) null,content TEXT null,createDate DATE null,modifiedDate DATE null,journalArticleId VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table AmfNewsletter_Article";

	public static final String ORDER_BY_JPQL = " ORDER BY article.order ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AmfNewsletter_Article.order_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ISSUENUMBER_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long JOURNALARTICLEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ORDER_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Article toModel(ArticleSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Article model = new ArticleImpl();

		model.setArticleId(soapModel.getArticleId());
		model.setIssueNumber(soapModel.getIssueNumber());
		model.setOrder(soapModel.getOrder());
		model.setCompanyId(soapModel.getCompanyId());
		model.setTitle(soapModel.getTitle());
		model.setAuthor(soapModel.getAuthor());
		model.setContent(soapModel.getContent());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setJournalArticleId(soapModel.getJournalArticleId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Article> toModels(ArticleSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Article> models = new ArrayList<Article>(soapModels.length);

		for (ArticleSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ArticleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _articleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setArticleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _articleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Article.class;
	}

	@Override
	public String getModelClassName() {
		return Article.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Article, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Article, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Article, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Article)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Article, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Article, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Article)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Article, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Article, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Article>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Article.class.getClassLoader(), Article.class, ModelWrapper.class);

		try {
			Constructor<Article> constructor =
				(Constructor<Article>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Article, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Article, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Article, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Article, Object>>();
		Map<String, BiConsumer<Article, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Article, ?>>();

		attributeGetterFunctions.put("articleId", Article::getArticleId);
		attributeSetterBiConsumers.put(
			"articleId", (BiConsumer<Article, Long>)Article::setArticleId);
		attributeGetterFunctions.put("issueNumber", Article::getIssueNumber);
		attributeSetterBiConsumers.put(
			"issueNumber", (BiConsumer<Article, Long>)Article::setIssueNumber);
		attributeGetterFunctions.put("order", Article::getOrder);
		attributeSetterBiConsumers.put(
			"order", (BiConsumer<Article, Long>)Article::setOrder);
		attributeGetterFunctions.put("companyId", Article::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Article, Long>)Article::setCompanyId);
		attributeGetterFunctions.put("title", Article::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<Article, String>)Article::setTitle);
		attributeGetterFunctions.put("author", Article::getAuthor);
		attributeSetterBiConsumers.put(
			"author", (BiConsumer<Article, String>)Article::setAuthor);
		attributeGetterFunctions.put("content", Article::getContent);
		attributeSetterBiConsumers.put(
			"content", (BiConsumer<Article, String>)Article::setContent);
		attributeGetterFunctions.put("createDate", Article::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Article, Date>)Article::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Article::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Article, Date>)Article::setModifiedDate);
		attributeGetterFunctions.put(
			"journalArticleId", Article::getJournalArticleId);
		attributeSetterBiConsumers.put(
			"journalArticleId",
			(BiConsumer<Article, String>)Article::setJournalArticleId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getArticleId() {
		return _articleId;
	}

	@Override
	public void setArticleId(long articleId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_articleId = articleId;
	}

	@JSON
	@Override
	public long getIssueNumber() {
		return _issueNumber;
	}

	@Override
	public void setIssueNumber(long issueNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_issueNumber = issueNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalIssueNumber() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("issueNumber"));
	}

	@JSON
	@Override
	public long getOrder() {
		return _order;
	}

	@Override
	public void setOrder(long order) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_order = order;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOrder() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("order_"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@JSON
	@Override
	public String getAuthor() {
		if (_author == null) {
			return "";
		}
		else {
			return _author;
		}
	}

	@Override
	public void setAuthor(String author) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_author = author;
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return "";
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_content = content;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getJournalArticleId() {
		if (_journalArticleId == null) {
			return "";
		}
		else {
			return _journalArticleId;
		}
	}

	@Override
	public void setJournalArticleId(String journalArticleId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_journalArticleId = journalArticleId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalJournalArticleId() {
		return getColumnOriginalValue("journalArticleId");
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Article.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Article toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Article>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ArticleImpl articleImpl = new ArticleImpl();

		articleImpl.setArticleId(getArticleId());
		articleImpl.setIssueNumber(getIssueNumber());
		articleImpl.setOrder(getOrder());
		articleImpl.setCompanyId(getCompanyId());
		articleImpl.setTitle(getTitle());
		articleImpl.setAuthor(getAuthor());
		articleImpl.setContent(getContent());
		articleImpl.setCreateDate(getCreateDate());
		articleImpl.setModifiedDate(getModifiedDate());
		articleImpl.setJournalArticleId(getJournalArticleId());

		articleImpl.resetOriginalValues();

		return articleImpl;
	}

	@Override
	public Article cloneWithOriginalValues() {
		ArticleImpl articleImpl = new ArticleImpl();

		articleImpl.setArticleId(
			this.<Long>getColumnOriginalValue("articleId"));
		articleImpl.setIssueNumber(
			this.<Long>getColumnOriginalValue("issueNumber"));
		articleImpl.setOrder(this.<Long>getColumnOriginalValue("order_"));
		articleImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		articleImpl.setTitle(this.<String>getColumnOriginalValue("title"));
		articleImpl.setAuthor(this.<String>getColumnOriginalValue("author"));
		articleImpl.setContent(this.<String>getColumnOriginalValue("content"));
		articleImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		articleImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		articleImpl.setJournalArticleId(
			this.<String>getColumnOriginalValue("journalArticleId"));

		return articleImpl;
	}

	@Override
	public int compareTo(Article article) {
		int value = 0;

		if (getOrder() < article.getOrder()) {
			value = -1;
		}
		else if (getOrder() > article.getOrder()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Article)) {
			return false;
		}

		Article article = (Article)object;

		long primaryKey = article.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Article> toCacheModel() {
		ArticleCacheModel articleCacheModel = new ArticleCacheModel();

		articleCacheModel.articleId = getArticleId();

		articleCacheModel.issueNumber = getIssueNumber();

		articleCacheModel.order = getOrder();

		articleCacheModel.companyId = getCompanyId();

		articleCacheModel.title = getTitle();

		String title = articleCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			articleCacheModel.title = null;
		}

		articleCacheModel.author = getAuthor();

		String author = articleCacheModel.author;

		if ((author != null) && (author.length() == 0)) {
			articleCacheModel.author = null;
		}

		articleCacheModel.content = getContent();

		String content = articleCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			articleCacheModel.content = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			articleCacheModel.createDate = createDate.getTime();
		}
		else {
			articleCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			articleCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			articleCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		articleCacheModel.journalArticleId = getJournalArticleId();

		String journalArticleId = articleCacheModel.journalArticleId;

		if ((journalArticleId != null) && (journalArticleId.length() == 0)) {
			articleCacheModel.journalArticleId = null;
		}

		return articleCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Article, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Article, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Article, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Article)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Article, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Article, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Article, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Article)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Article>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _articleId;
	private long _issueNumber;
	private long _order;
	private long _companyId;
	private String _title;
	private String _author;
	private String _content;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _journalArticleId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Article, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Article)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("articleId", _articleId);
		_columnOriginalValues.put("issueNumber", _issueNumber);
		_columnOriginalValues.put("order_", _order);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("author", _author);
		_columnOriginalValues.put("content", _content);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("journalArticleId", _journalArticleId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("order_", "order");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("articleId", 1L);

		columnBitmasks.put("issueNumber", 2L);

		columnBitmasks.put("order_", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("title", 16L);

		columnBitmasks.put("author", 32L);

		columnBitmasks.put("content", 64L);

		columnBitmasks.put("createDate", 128L);

		columnBitmasks.put("modifiedDate", 256L);

		columnBitmasks.put("journalArticleId", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Article _escapedModel;

}